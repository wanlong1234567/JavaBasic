回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在整个循环过程中所反复改变的那个数
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时首选do...while
  3)for:应用率最高，固定次数循环
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环


正课:
1.三种循环结构的更佳适用情况:
  1)while:"当..."循环
  2)do...while:"直到..."循环
               要素1与要素3相同时首选do...while
  3)for:固定次数循环
2.嵌套循环:
  1)循环中套循环，一般多行多列时使用，外层控制行，内存控制列
  2)执行规则:外层循环走一次，内层循环走所有次
  3)建议:嵌套的层数越少越好，能用一层就不用两层，能用两层不用三层
         若需求必须要通过三层以上的循环才能解决，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
	设计良好的/合理的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的声明:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[3]; //0,0,0
	  int[] arr = {1,4,7}; //1,4,7
	  int[] arr = new int[]{1,4,7}; //1,4,7
	  int[] arr;
	  arr = {1,4,7}; //编译错误，此方式只能声明的同时初始化
      arr = new int[]{1,4,7}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)可以获取数组的长度
	      int[] arr = new int[4];
          System.out.println(arr.length); //4
	5.2)通过下标/索引来访问数组中的元素
	    下标从0开始，最大到(数组的长度-1)
		  int[] arr = new int[3];
		  arr[0] = 100;
		  arr[1] = 200;
		  arr[2] = 300;
		  arr[3] = 400; //数组下标越界异常
		  System.out.println(arr[arr.length-1]); //输出最后一个元素
  6)数组的遍历:
      int[] arr = new int[10];
	  for(int i=0;i<arr.length;i++){
	    arr[i] = 100;
	  }
	  for(int i=0;i<arr.length;i++){
	    System.out.println(arr[i]);
	  }
	  for(int i=arr.length-1;i>=0;i--){
	    System.out.println(arr[i]);
	  }
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4);
	7.2)int[] a1 = Arrays.copyOf(a,6);
	    a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
    8.1)Arrays.sort(arr); //升序、效率高
	8.2)冒泡原理:
	    8.2.1)四个数冒三轮
		8.2.2)每一轮都是从第1个元素开始冒
		      每一次都是和它下一个元素比
		8.2.3)冒出来的就不带它玩了